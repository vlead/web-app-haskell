#+TITLE: Example Servant App


* Introduction

  - This is an example web API written using Servant.
  - The API has one route - =/users/showUsers=, that shows the users currently
    stored by hardcoding them into the API
    the API.
  - The API does not interact with a database.

* Language Extensions and Imports 

#+NAME: extns_and_imports
#+BEGIN_SRC haskell 
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE TypeOperators #-}

module Server where

import Prelude ()
import Prelude.Compat

import Control.Monad.Except
import Control.Monad.Reader
import Data.Aeson.Compat
import Data.Aeson.Types
import Data.Attoparsec.ByteString
import Data.ByteString (ByteString)
import Data.List
import Data.Maybe
import Data.String.Conversions
import Data.Time.Calendar
import GHC.Generics
import Lucid
import Network.HTTP.Media ((//), (/:))
import Network.Wai
import Network.Wai.Handler.Warp
import Servant
import System.Directory
import Text.Blaze
import Text.Blaze.Html.Renderer.Utf8
import qualified Data.Aeson.Parser
import qualified Text.Blaze.Html

#+END_SRC

* API Types

#+NAME: api_types
#+BEGIN_SRC haskell 
type UserAPI = "showUsers" :> Get '[JSON] [User]
             :<|> "addUser" :> ReqBody '[JSON] User :> Post '[JSON] (Maybe (Key User))
             
  
  

#+END_SRC
* Run

#+NAME: run
#+BEGIN_SRC haskell
userAPI :: Proxy UserAPI
userAPI = Proxy

#+END_SRC
* Tangling

#+BEGIN_SRC haskell :eval no :noweb yes :tangle Api.hs
<<extns_and_imports>>
<<api_types>>
<<run>>
#+END_SRC
