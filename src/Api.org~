#+TITLE: Example Servant App


* Introduction

  - This is an example web API written using Servant.
  - The API has one route - =/users/showUsers=, that shows the users currently
    stored by hardcoding them into the API
    the API.
  - The API does not interact with a database.

* Routes

*** showUsers

    - URL :: users/showUsers
    - Method :: GET

    - URL Params :: None

    - Success Response ::
 
         + Code :: 200

         + Response ::

    + Content ::
      #+BEGIN_EXAMPLE
      [
	{
	  "id": "1",
	  "email": {
	    "email": "xyz@vlabs.ac.in",
	    "id": "1"
	  },
	  "roles": [],
	  "name": {
	    "name": "admin",
	    "id": "1"
	  }
	},
	{
	  "id": "2",
	  "email": {
	    "email": "abc@gmail.com",
	    "id": "2"
	  },
	  "roles": [],
	  "name": {
	    "name": "abc",
	    "id": "2"
	  }
	}
      ]
      #+END_EXAMPLE

  - Error Response ::
    + Code: 401 UNAUTHORIZED

    + Content: { error : "Not Authorized" }

    OR

    + Code: 400 Bad Request

    + Content: { error : "Malformed arguments" }

    OR

    + Code: 500

    + Content: { error : Exception String}

* Language Extensions and Imports 

#+NAME: extns_and_imports
#+BEGIN_SRC haskell 
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE TypeOperators #-}

module Server where

import Prelude ()
import Prelude.Compat

import Control.Monad.Except
import Control.Monad.Reader
import Data.Aeson.Compat
import Data.Aeson.Types
import Data.Attoparsec.ByteString
import Data.ByteString (ByteString)
import Data.List
import Data.Maybe
import Data.String.Conversions
import Data.Time.Calendar
import GHC.Generics
import Lucid
import Network.HTTP.Media ((//), (/:))
import Network.Wai
import Network.Wai.Handler.Warp
import Servant
import System.Directory
import Text.Blaze
import Text.Blaze.Html.Renderer.Utf8
import qualified Data.Aeson.Parser
import qualified Text.Blaze.Html

#+END_SRC

* API Types

#+NAME: api_types
#+BEGIN_SRC haskell 
type UserAPI = "user" :> 
  ("showUsers" :> Get '[JSON] [User]
  
  

#+END_SRC
* Content Types

#+NAME: content_types
#+BEGIN_SRC haskell 
-- role type 
-- note: Role: use algebraic data types- show

-- note: email :: String for now- complete email type constructor

data User = User
  { id :: Int,
    name :: String,
    email :: String,
    role :: String
  } deriving (Eq, Show, Generic)

instance ToJSON User
#+END_SRC

* (Test) Defining some data

#+NAME: sample_data
#+BEGIN_SRC haskell 
users1 :: [User]
users1 =
  [ User 1 "Small Cat" "smallcat@gmail.com" "Admin"  
  , User 2 "Large Cat" "largecat@gmail.com" "User"
  ]
#+END_SRC
* Run

#+NAME: run
#+BEGIN_SRC haskell
server1 :: Server UserAPI
server1 = return users1

userAPI :: Proxy UserAPI
userAPI = Proxy

-- 'serve' comes from servant and hands you a WAI Application,
-- which you can think of as an "abstract" web application,
-- not yet a webserver.
app1 :: Application
app1 = serve userAPI server1

main :: IO ()
main = do
  putStrLn "Running on port 8000"
  run 8000 app1

#+END_SRC
* Tangling

#+BEGIN_SRC haskell :eval no :noweb yes :tangle Main.hs
<<extns_and_imports>>
<<api_types>>
<<content_types>>
<<sample_data>>
<<run>>
#+END_SRC
