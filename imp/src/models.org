#+TITLE: Models - Using Persistent Database

* Introduction

The data model- that are stored in the database- are defined here. 

We define here a single database that stores a value - User.
** User

   - id
   - name
   - email
   - roles

* Language Extensions and Imports
  
#+NAME: extns_and_imports
#+BEGIN_SRC haskell 
{-# LANGUAGE EmptyDataDecls             #-}
{-# LANGUAGE FlexibleContexts           #-}
{-# LANGUAGE GADTs                      #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE MultiParamTypeClasses      #-}
{-# LANGUAGE OverloadedStrings          #-}
{-# LANGUAGE QuasiQuotes                #-}
{-# LANGUAGE TemplateHaskell            #-}
{-# LANGUAGE TypeFamilies               #-}
module Models where
import Data.Aeson
import Data.Text

import Role


import           Control.Monad.IO.Class  (liftIO)
import           Database.Persist 
import           Database.Persist.Sqlite
import           Database.Persist.TH

#+END_SRC
* Externally Defined Datatypes

=Persistent= requires us to define custom datatypes in an external file (due to
the way Template Haskell in the main =Models= module is parsed.) 

** Role
   
#+NAME: external_types
#+BEGIN_SRC haskell :tangle Role.hs
-- @Role.hs
-- defining the enumerated Role datatype

{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE DeriveGeneric #-}


module Role where

import Database.Persist.TH
import GHC.Generics
import Data.Aeson
import Data.Text

data Role = Admin | NonAdmin
  deriving (Generic, Show, Read, Eq)

instance ToJSON Role where
  toJSON Admin = object [pack("role") .= "Admin"]
  toJSON NonAdmin = object [pack("role") .= "NonAdmin"]
  
-- storing this datatype as a PersistField type
derivePersistField "Role"

  

#+END_SRC
* User Model

#+NAME: user_model
#+BEGIN_SRC haskell

share [mkPersist sqlSettings, mkMigrate "migrateAll"] [persistLowerCase|
User
  name String
  email String
  roles Role
  deriving Eq Read Show
|]

#+END_SRC

* User Instances Of
#+NAME: user_instances_of
#+BEGIN_SRC haskell

instance ToJSON User where
  toJSON (User name email roles) =
    object [ "name" .= name
           , "email"  .= email
           , "roles" .= roles]



#+END_SRC
* Tangling 

#+NAME: tangling
#+BEGIN_SRC haskell :eval no :noweb yes :tangle Models.hs
<<extns_and_imports>>
<<user_model>>
<<user_instances_of>>
#+END_SRC
