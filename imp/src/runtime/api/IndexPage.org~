#+TITLE: Index Page Api


* Language Extensions and Imports
  

#+NAME: extns_and_imports
#+BEGIN_SRC haskell 
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE TypeOperators #-}

module Index where

import Prelude ()
import Prelude.Compat

import Control.Monad.Except
import Control.Monad.Reader
import Data.Aeson.Compat
import Data.Aeson.Types
import Data.Attoparsec.ByteString
import Data.ByteString (ByteString)
import Data.List
import Data.Maybe
import Data.String.Conversions
import Network.HTTP.Media ((//), (/:))
import Network.Wai
import Network.Wai.Handler.Warp
import Servant
import System.Directory
import Text.Blaze
import Text.Blaze.Html.Renderer.Utf8
import qualified Data.Aeson.Parser
import qualified Text.Blaze.Html
import Data.Text
import Servant.Api

import Models

import Servant.API
#+END_SRC

* REST

Returns index page and welcome message

#+NAME: index
#+BEGIN_SRC haskell

type IndexApi = "index" :> Get '[PlainText] Text

#+END_SRC

* Tangling

#+BEGIN_SRC haskell :eval no :noweb yes :tangle 
<<extns_and_imports>>
<<index>>
#+END_SRC
