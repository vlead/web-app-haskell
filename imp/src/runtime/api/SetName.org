#+TITLE: Set Name Api


* Language Extensions and Imports
  

#+NAME: extns_and_imports
#+BEGIN_SRC haskell 
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE TypeOperators #-}

module SetName where

import Prelude ()
import Prelude.Compat

import Control.Monad.Except
import Control.Monad.Reader
import Data.Aeson.Compat
import Data.Aeson.Types
import Data.Attoparsec.ByteString
import Data.ByteString (ByteString)
import Data.List
import Data.Maybe
import Data.String.Conversions
import Network.HTTP.Media ((//), (/:))
import Network.Wai
import Network.Wai.Handler.Warp
import Servant
import System.Directory
import Text.Blaze
import Text.Blaze.Html.Renderer.Utf8
import qualified Data.Aeson.Parser
import qualified Text.Blaze.Html
import Data.Text

import Models

import Servant.API
#+END_SRC

* REST


** API Design

  - URL :: /setName

  - Method :: POST

  - Data Params ::  
    #+BEGIN_EXAMPLE
    {
    "current-data" : "soft-kitty",
    "new-data" : "warm-kitty"    
    }
    #+END_EXAMPLE		   

  - Success Response ::
    + Code: 200

    + Content ::
      #+BEGIN_EXAMPLE
    {
	"name"  : "warm-kitty",
    "email" : "soft_kitty@cat.com",
    "roles" :
              {"role":"NonAdmin"}
    }
      #+END_EXAMPLE
		
  - Error Response ::
    + Code: 401 

    OR

    + Code: 400 Bad Request

    OR

    + Code: 500

    + Content: { error : Exception String}

  - Example ::
    #+BEGIN_EXAMPLE
    http://localhost:8000/setName
    #+END_EXAMPLE

** Implementation

#+NAME: set_name
#+BEGIN_SRC haskell

type SetNameApi = Header "Cookie" String :> "setName" :> ReqBody '[JSON] UpdateUserData :> Post '[JSON] (Maybe (User)) 

#+END_SRC

* Tangling

#+BEGIN_SRC haskell :eval no :noweb yes :tangle SetName.hs

<<extns_and_imports>>
<<set_name>>
#+END_SRC
