#+TITLE: Authentication Function for App


* Introduction

Authentication is implemented using sessions and cookie-based authentication.

** Session

A value of type =Session= is stored in the database for each user logged in.

=Session= type has the following properties :

  - SessionUserId :: Id of the user corresponding to the session
  - SessionUserEmail :: Email of the logged-in user
  - SessionUserRoles  :: Role of the logged-in user
  - SessionId        :: Id of the session, which is passed as a cookie to the client.


** Login

A value of type =Session= is created and stored in the database upon login. A
cookie corresponding to the newly-created session is sent to the client.
** Logout

The session corresponding to the logged-in user is deleted from the database
upon logout.
** Initialisation

Upon initialisation, all sessions in the database are deleted, if any.
** Authentication

For routes that need authentication, a value of type =Int= - that corresponds
to the =SessionId= of the current session- is passed as header.

*** Admin Auth

    - Usage :: Used to verify if logged-in user has role admin.
    - Procedure :: check if session with =SessionId = authVal= has role
                   =Admin=.
    - Function :: =adminAuthCheck=
    
*** Login Auth

    - Usage :: Used to verify if user is logged in.
    - Procedure :: check if session with =SessionId = authVal= exists in the
                   database.
    - Function :: =authCheck=
* Language Extensions and Imports

#+NAME: extns_and_imports
#+BEGIN_SRC haskell
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE LambdaCase        #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TypeFamilies      #-}
{-# LANGUAGE TypeOperators     #-}

module Authentication where

import           Control.Monad.IO.Class
import           Control.Monad.Logger (runStderrLoggingT)
import           Text.Regex.Posix
import           Data.String.Conversions
import qualified Data.ByteString.Lazy.Char8 as B           

import           Database.Persist
import           Database.Persist.Sql
import           Database.Persist.Sqlite

import           Network.Wai
import           Network.Wai.Handler.Warp as Warp

import           Servant

import           Data.Text

import           Api
import           Models
import           Role

#+END_SRC

* Utility Functions

These are utility functions to be used in implementing authentication-related
tasks.

The following function takes a value of type =String= and returns an equivalent
value of type =Int=. This is used to convert URL values to something that can
be used as a Sql key.

#+NAME: to_int
#+BEGIN_SRC haskell

toInt :: String -> Int
toInt str = read str

#+END_SRC

The following function takes a value of type =String= and converts it to a
value of type =SessionId=. This is used to convert a cookie (that represents
the session-ID of a logged-in user) to a =SessionId= value.

#+NAME: to_session_id
#+BEGIN_SRC haskell

toSessionId :: String -> SessionId
toSessionId val = toSqlKey $ fromIntegral $ toInt val

#+END_SRC

The following function checks if a required header value is present or not.

#+NAME: header_check
#+BEGIN_SRC haskell

headerCheck :: Maybe String -> String
headerCheck authVal = case authVal of
    Nothing -> "0"
    Just value -> value

#+END_SRC

* Authentication Handlers

The functions for returning authentication status (True/False).

** isEmail

Utility authentication function for returning whether or not a value of type
=UserEmail= has the correct format.

#+BEGIN_SRC haskell

isEmail :: String -> Maybe (String)
isEmail email = x

#+END_SRC
** hasRole

To check whether the user being logged in with a given =Role= has that role
belonging to said user:

#+NAME: has_role_check
#+BEGIN_SRC haskell

hasRole :: ConnectionPool -> Session -> IO (Bool)
hasRole pool session = flip runSqlPersistMPool pool $ do
  user <- selectFirst [UserEmail ==. (sessionUserEmail session)] []
  case user of
    Nothing -> return False
    Just xs -> let
                 roles = userRoles $ entityVal xs
                 sessionRole = Prelude.head (sessionUserRoles session)
               in
                 if (sessionRole `elem` roles)
                 then return True
                 else return False
                    
      
#+END_SRC

** loginCheck

To check whether an user is logged-in - i.e: whether the session passed by the
user is in =Session= database:

#+NAME: login_check
#+BEGIN_SRC haskell
      
loginCheck :: ConnectionPool -> String -> IO Bool
loginCheck pool authSessionId = flip runSqlPersistMPool pool $ do
  isLoggedIn <- get $ toSessionId authSessionId
  case isLoggedIn of
    Nothing -> return False
    Just _ -> return True

#+END_SRC

** adminAuthCheck

To check whether a user is logged-in with =Admin= role:

#+NAME: admin_auth_check
#+BEGIN_SRC haskell

adminAuthCheck :: ConnectionPool -> String -> IO Bool
adminAuthCheck pool authSessionId = flip runSqlPersistMPool pool $ do
  roleOfLoggedInUser <- get $ toSessionId authSessionId
  case roleOfLoggedInUser of
    Nothing -> return False
    Just roleValue -> case (sessionUserRoles roleValue) of  
                        [NonAdmin] -> return False
                        [Admin]    -> return True
#+END_SRC

** isSelfCheck

To check if logged-in user is the same as user passed to the function:

#+NAME: is_self_check
#+BEGIN_SRC haskell

isSelfCheck :: ConnectionPool -> String -> String -> IO Bool
isSelfCheck pool userData authSessionId = flip runSqlPersistMPool pool $ do
  roleOfLoggedInUser <- get $ toSessionId authSessionId
  case roleOfLoggedInUser of
    Nothing -> return False
    Just roleValue -> if (((sessionUserEmail roleValue) == userData))
                        then return True
                        else return False

#+END_SRC                        

** isEitherAdminOrSelfCheck

To check if logged-in user either has =Admin= role or is same as user passed to
the function:

#+NAME: is_either_admin_or_self_check
#+BEGIN_SRC haskell 

isEitherAdminOrSelfCheck :: ConnectionPool -> String -> String -> IO Bool
isEitherAdminOrSelfCheck pool userData authSessionId = flip runSqlPersistMPool pool $ do
  roleOfUser <- get $ toSessionId authSessionId
  case roleOfUser of
    Nothing -> return False
    Just xs -> case (sessionUserRoles xs) of
      [Admin] -> return True
      [NonAdmin] -> if ((sessionUserEmail xs) == userData) 
        then return True
        else do
          userEntity <- selectFirst [UserEmail ==. (sessionUserEmail xs)] []
          case (entityVal <$> userEntity) of
            Nothing -> return False
            Just x -> if ((userName x) == userData)
                      then return True
                      else return False
  
#+END_SRC

** isNotAdminSelfCheck

To check if logged-in user has =Admin= role and is not the same as user passed
to the function:

#+NAME: is_not_admin_self_check
#+BEGIN_SRC haskell

isNotAdminSelfCheck :: ConnectionPool -> Text -> String -> IO Bool
isNotAdminSelfCheck pool userData authSessionId = flip runSqlPersistMPool pool $ do
  roleOfLoggedInUser <- get $ toSessionId authSessionId
  case roleOfLoggedInUser of
    Nothing -> return False
    Just roleValue -> case (sessionUserRoles roleValue) of
                        [NonAdmin] -> return False
                        [Admin] -> if ((sessionUserEmail roleValue) == unpack(userData))
                                   then return False
                                   else return True

#+END_SRC

* Tangling

#+NAME: tangling
#+BEGIN_SRC haskell :eval no :noweb yes :tangle Authentication.hs
<<extns_and_imports>>
<<to_int>>
<<to_session_id>>
<<header_check>>
<<login_check>>
<<admin_auth_check>>
<<is_self_check>>
<<is_either_admin_or_self_check>>
<<is_not_admin_self_check>>
<<has_role_check>>
#+END_SRC
