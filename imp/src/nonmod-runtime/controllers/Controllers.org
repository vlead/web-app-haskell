#+TITLE: Controllers For User Directory Webapp


* Introduction

Defining the controllers to perform CRUD operations on the data read from the
underlying database.

* Language Extensions and Imports

  
#+NAME: extns_and_imports
#+BEGIN_SRC haskell
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE LambdaCase        #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TypeFamilies      #-}
{-# LANGUAGE TypeOperators     #-}

module Controllers where

import           Data.Aeson
import           Data.Text
import           Data.List 
import           Control.Monad.IO.Class
import           Control.Monad.Logger (runStderrLoggingT)

import           Data.String.Conversions
import qualified Data.ByteString.Lazy.Char8 as B           

import           Database.Persist
import           Database.Persist.Sql
import           Database.Persist.Sqlite

import           Network.Wai
import           Network.Wai.Handler.Warp as Warp

import           Servant

import           Data.Text

import           Api
import           Models
import           Role
import           Authentication 

#+END_SRC
* Controllers

** showUsers controller

#+NAME: show_all_users_helper
#+BEGIN_SRC haskell 

-- helper function for showUsersHandler
showAllUsersHelper :: ConnectionPool -> Bool -> IO ([ShowUserData])
showAllUsersHelper pool authVal = flip runSqlPersistMPool pool $ case authVal of
    False -> return []
    True  -> do
      users <- selectList [] []
      return $ Prelude.map toShowUserData $ Prelude.map entityVal users

#+END_SRC

** addUser controller
   :PROPERTIES:
   :ORDERED:  t
   :END:

#+NAME: add_user_helper
#+BEGIN_SRC haskell

-- helper function for addUserHandler
addUserHelper :: User -> ConnectionPool -> Bool -> IO (Maybe (ResponseUserId))
addUserHelper newUser pool authVal = flip runSqlPersistMPool pool $ case authVal of
  False -> return Nothing
  True  -> do
    exists <- selectFirst [UserEmail ==. (userEmail newUser)] []
    case exists of
      Nothing -> Just <$> (ResponseUserId <$> Database.Persist.Sqlite.insert newUser)
      Just _  -> return Nothing

#+END_SRC

** deleteUser controller

#+NAME: delete_user_helper
#+BEGIN_SRC haskell

-- helper function for deleteUserHandler
deleteUserHelper :: Text -> ConnectionPool -> Bool -> IO ((Maybe (User)))
deleteUserHelper userToDel pool authVal = flip runSqlPersistMPool pool $ case authVal of
  False -> return Nothing
  True  -> do
    deletedUser <- selectFirst [UserEmail ==. unpack(userToDel)] []
    case deletedUser of
      Nothing -> return Nothing
      Just _ -> do
        userIfDeleted <- deleteWhere [UserEmail ==. unpack(userToDel)]
        return $ entityVal <$> deletedUser

#+END_SRC

** login controller

#+NAME: login_helper
#+BEGIN_SRC haskell

-- helper function for loginHandler
loginHelper :: Session -> ConnectionPool -> IO (Maybe (ResponseSessionId))
loginHelper newSession pool = flip runSqlPersistMPool pool $ do
  ifLoggedIn <- selectFirst [SessionUserEmail ==. (sessionUserEmail newSession), SessionUserRoles ==. (sessionUserRoles newSession)] []
  case ifLoggedIn of
    Just _ -> return Nothing
    Nothing -> do 
      ifExists <- selectFirst [UserEmail ==. (sessionUserEmail newSession)] []
      case ifExists of
        Nothing -> return Nothing
        Just _  -> Just <$> (ResponseSessionId <$> Database.Persist.Sqlite.insert newSession)
  
#+END_SRC

** logout controller

#+NAME: logout_helper
#+BEGIN_SRC haskell

-- helper function for logoutHandler
logoutHelper :: Session -> ConnectionPool -> Bool -> IO (Maybe (Session))
logoutHelper currentSession pool authVal = flip runSqlPersistMPool pool $ case authVal of
  False -> return Nothing
  True  -> do
    ifExists <- selectFirst [SessionUserEmail ==. (sessionUserEmail currentSession), SessionUserRoles ==. (sessionUserRoles currentSession)] []
    case ifExists of
      Nothing -> return Nothing
      Just _ -> do
        deleteWhere [SessionUserEmail ==. (sessionUserEmail currentSession)]
        return $ entityVal <$> ifExists
      
  
#+END_SRC

** setName controller

#+NAME: set_name
#+BEGIN_SRC haskell

setNameHelper :: ConnectionPool -> UpdateUserData -> IO (Maybe (User))
setNameHelper pool userData = flip runSqlPersistMPool pool $ do
  updateWhere [UserName ==. (currentData userData)] [UserName =. (newData userData)]
  ret <- selectFirst [UserName ==. (newData userData)] []
  return $ entityVal <$> ret 
  

#+END_SRC
** setEmail controller

#+NAME: set_email
#+BEGIN_SRC haskell

setEmailHelper :: ConnectionPool -> UpdateUserData -> IO (Maybe (User))
setEmailHelper pool userData = flip runSqlPersistMPool pool $ do
  updateWhere [UserEmail ==. (currentData userData)] [UserEmail =. (newData userData)]
  ret <- selectFirst [UserEmail ==. (newData userData)] []
  return $ entityVal <$> ret 
  

#+END_SRC

** showUserDetails controller

#+NAME: show_user_details
#+BEGIN_SRC haskell

showUserDetailsHelper :: ConnectionPool -> String -> IO (Maybe (User))
showUserDetailsHelper pool userData = flip runSqlPersistMPool pool $ do
  user <- selectFirst [UserEmail ==. userData] []
  return $ entityVal <$> user

#+END_SRC
** showSessions controller

#+NAME: show_sessions
#+BEGIN_SRC haskell

showSessionsHelper :: ConnectionPool -> IO ([Session])
showSessionsHelper pool = flip runSqlPersistMPool pool $ do
  sessions <- selectList [] []
  return $ Prelude.map entityVal sessions
#+END_SRC
** showRoles controller

#+NAME: show_roles
#+BEGIN_SRC haskell

showRolesHelper :: ConnectionPool -> String -> IO ([Role])
showRolesHelper pool userData = flip runSqlPersistMPool pool $ do
  user <- selectFirst [UserEmail ==. userData] []
  case user of
    Nothing -> return []
    Just xs -> return (userRoles $ entityVal xs)
  

#+END_SRC
** addRole controller 

#+NAME: add_role
#+BEGIN_SRC haskell

addRoleHelper :: ConnectionPool -> String -> Role -> IO (Maybe (User))
addRoleHelper pool userData newRole = flip runSqlPersistMPool pool $ do
  user <- selectFirst [UserEmail ==. userData] []
  case user of
    Nothing -> return Nothing
    Just xs -> let
      roles = userRoles (entityVal xs)
      in 
        if ((newRole `elem` roles) || ((Data.List.length roles) == 2))
        then return Nothing
        else 
          let
            newRoles = roles ++ [newRole]
          in
            do
              updateWhere [UserEmail ==. userData] [UserRoles =. newRoles]
              updatedUser <- selectFirst [UserEmail ==. userData] []
              return $ entityVal <$> updatedUser




#+END_SRC

** deleteRole controller

#+NAME: delete_role
#+BEGIN_SRC haskell

-- function to delete role: takes advantage of the fact that
-- there are only two roles
deleteRole :: Role -> [Role] -> [Role]
deleteRole role ls = if ((Data.List.head ls) == role)
  then (Data.List.tail ls)
  else (Data.List.init ls)

  
deleteRoleHelper :: ConnectionPool -> String -> Role -> IO (Maybe (User))
deleteRoleHelper pool userData newRole = flip runSqlPersistMPool pool $ do
  user <- selectFirst [UserEmail ==. userData] []
  case user of
    Nothing -> return Nothing
    Just xs -> let
      roles = userRoles (entityVal xs)
      in 
        if ((newRole `elem` roles) && (Data.List.length roles > 1))
        then let
                 newRoles = deleteRole newRole roles
               in
                 do
                   updateWhere [UserEmail ==. userData] [UserRoles =. newRoles]
                   updatedUser <- selectFirst [UserEmail ==. userData] []
                   return $ entityVal <$> updatedUser
        else return Nothing 

#+END_SRC

* Tangling

#+BEGIN_SRC haskell :eval no :noweb yes :tangle Controllers.hs
<<extns_and_imports>>
<<show_all_users_helper>>
<<add_user_helper>>
<<delete_user_helper>>
<<login_helper>>
<<logout_helper>>
<<set_name>>
<<set_email>>
<<show_user_details>>
<<show_sessions>>
<<show_roles>>
<<add_role>>
<<delete_role>>
#+END_SRC
