#+TITLE: Example Servant App

* Introduction

This is an example web API written using =Servant= , that interacts with a sqlite
database via the haskell library =Persistent=.

The API has six routes :

** Non-Secure Routes - Not Requiring Authentication

*** index
*** login

** Secure Routes - Requiring Authentication

*** showUsers
*** addUser
*** deleteUser
*** logout

* Language Extensions and Imports 

#+NAME: extns_and_imports
#+BEGIN_SRC haskell 
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE TypeOperators #-}

module Api where

import Prelude ()
import Prelude.Compat

import Control.Monad.Except
import Control.Monad.Reader
import Data.Aeson.Compat
import Data.Aeson.Types
import Data.Attoparsec.ByteString
import Data.ByteString (ByteString)
import Data.List
import Data.Maybe
import Data.String.Conversions
import Data.Time.Calendar
import GHC.Generics
import Lucid
import Network.HTTP.Media ((//), (/:))
import Network.Wai
import Network.Wai.Handler.Warp
import Servant
import System.Directory
import Text.Blaze
import Text.Blaze.Html.Renderer.Utf8
import qualified Data.Aeson.Parser
import qualified Text.Blaze.Html

import Data.Proxy
import Data.Text

import Database.Persist

import Models
import Servant.API
#+END_SRC

* Datatypes For Instruction Input

Defining datatypes for the request body.

** =UserData= : Type to input user details

#+NAME: user_data
#+BEGIN_SRC haskell
data UserData = UserData {
                           userDataName :: String
                         , userDataEmail :: String
                         , userDataRole :: String
                         } deriving (Show, Read, Eq)


instance ToJSON UserData where
  toJSON (UserData userDataName userDataEmail userDataRole) =
    object ["name" .= userDataName
           ,"email" .= userDataEmail
           ,"role" .= userDataRole]


instance FromJSON UserData where
  parseJSON = withObject "UserData" $ \ v ->
    UserData <$> v .: "name"
             <*> v .: "email"
             <*> v .: "role"
 

#+END_SRC 

** =UniqueUserData= : a unique value to identify the user by

In this case, we take =UniqueUserData= to be =userEmail=.

#+NAME: unique_user_data
#+BEGIN_SRC haskell

data UniqueUserData = UniqueUserData {
                                       userData :: String
                                     } deriving (Eq, Read, Show)


instance ToJSON UniqueUserData where
  toJSON (UniqueUserData userData) =
    object ["data" .= userData]

instance FromJSON UniqueUserData where
  parseJSON = withObject "UniqueUserData" $ \ v ->
    UniqueUserData <$> v .: "data"



#+END_SRC
** =Cat= : a cat

#+NAME: cat
#+BEGIN_SRC haskell
data Cat = Cat {
               Name :: String,
               Fluffiness :: Int,
               Adorable :: Bool
               } deriving (Generic, Eq, Show, Read)

#+END_SRC

* API 

** Routes not requiring authentication

#+NAME: nonsecure_routes
#+BEGIN_SRC haskell
type NonSecureRoutes = "index" :> Get '[PlainText] Text
                     :<|> "login" :> ReqBody '[JSON] Session :> Post '[JSON] (Maybe (Key (Session)))
#+END_SRC
** Routes requiring authentication

#+NAME: secure_routes
#+BEGIN_SRC haskell
 
type SecureRoutes = "showUsers" :> Get '[JSON] [User]
             :<|> "addUser" :> ReqBody '[JSON] User :> Post '[JSON] (Maybe (Key User))
             :<|> "deleteUser" :> ReqBody '[JSON] UniqueUserData :> Post '[JSON] (Maybe (User))
             :<|> "logout" :> ReqBody '[JSON] Session :> Post '[JSON] (Maybe (Session))
             
#+END_SRC
** Combined API

#+NAME: combined_api
#+BEGIN_SRC haskell
type UserAPI = (NonSecureRoutes)
  :<|> (Header "Cookie" String :> SecureRoutes)

#+END_SRC

* Tangling

#+BEGIN_SRC haskell :eval no :noweb yes :tangle Api.hs
<<extns_and_imports>>
<<unique_user_data>>
<<nonsecure_routes>>
<<secure_routes>>
<<combined_api>>
#+END_SRC
