#+TITLE: Requirements and Test Cases For User Directory


* Application

A web-based directory of users.
* User

** User Composition

System has users.

Realised as:

  - =User= table in database
  - =User= datatype in system

** User Identification 

Each user has an unique identification attribute - =email_address=

  - Realised by making =userEmail= an unique attribute in
    database. Therefore no two records can have same =userEmail=
** Uniqueness of User

Two users with the same email are the same users.

  - Realised by making =userEmail= an unique field in =PersistEntity User= table
  - Tested using =uniqueUserEmail= test case 

** Name of User

Each user has a name.

  - Realised by making =userName" a field in =User= datatype.

** Role of User

Each user has one or more role.

Realised by :

  - Making =Role= an enumerated data type with two values: =Admin= and
    =NonAdmin=. User with =Admin= role has admin privileges, and user with
    =NonAdmin= role does not have admin privileges.
  - There are no privileges that belong to =NonAdmin= user but not to =Admin=
    user
  - Making =Role= a field in =User= datatype.

* Role

** Role Mapping To An User  

*** User Maps To Single Role In Given Session

Each user is mapped to exactly one role in a given session.

  - Realised by making =Role= an enumerated datatype with two values, so that
    multiple values for =Role= cannot be input.
  - Realised by making =Role= a field in =Session= datatype
*** User Only Maps To Associated Role In Given Session

An user is mapped to one of the roles associated with the user.

  - Realised using =isRoleAssociated= predicate check function.
  - Tested using =mapToAssociatedRole= test case

** Types of Roles

There are two types of roles: =admin= and =user=.

  - Realised by making role an enumerated datatype with two values: =Admin= and
    =NonAdmin= (equivalent to =user=)
** Roles Privileges

Roles define the data access/modification prpivileges available to the user.

*** Admin Privileges

    - Create A New User
    - Read Information of All Users
    - Update Information of All Users
    - Delete All Users

Realised by implementing admin-login-authentication on the above routes.

Tested by using test cases for the above cases.
*** NonAdmin Privileges

    - View Certain Information of All Users
    - Update Information of Self

Realised by implementing only login authentication on the above routes.

Tested by using test cases on the above cases.
** >= 1 User With Admin Role

There is at least one user with role =admin= in the system.

Realised by:

    - Initialising the application with a single =Admin= user upon startup
    - Only an user logged-in with =Admin= role can delete an user
    - User cannot delete oneself
* Session

** Login is Mandatory

Users are required to login into the system to perform actions.

    - Realised by making a =session-id= part of the (type-safe) route
    - And by implementing predicate-check on every action, ensuring only user
      whose session mapped to =session-id= is in database can perform
      operations.

Tested using test cases.
** Logged-In User Mapped To A Session

Each user logged in is associated with a session.

  - Realised by storing a value of =Session= type in the database upon login
  - And one-to-many foreign key mapping from =User= table to =Session= table
  
** User-Session Mapping Constraints

   - Single user can have multiple sessions. Realised using one-to-many mapping
     from =User= table to =Session= table
   - No two sessions of a single user can have same role. Realised by making
     =sessionUserEmail - sessionUserRoles= field combination unique.

Tested using test cases.
** Privileges Associated With Session

Operations are permitted only if user logged in.
* Interactions With The System


** Requires Login/NonAdmin Privileges

   - Update the name of self
   - Update the email of self
   - View the details of self
   - View the list of users (name and email)

** Requires Login/Admin Privileges

   - Create an user
   - Update name of user
   - Update email of user
   - Update role of user
   - Delete role of user
   - View list of users
   - View details of an user (name, email, role)

** Requires Login/Admin Privileges && Not Self Condition

   - Delete an user
